"-----------------------------------------------------------------------------
" Settings that cause problems if they aren't run first
"-----------------------------------------------------------------------------
set nocompatible          " Don't try to be compatible with vi
call pathogen#infect()    " Tell pathogen to enable bundle plugins
filetype plugin indent on " Enable filetype detection, as well as ftplugins and filetype indenting
syntax enable             " Yes please syntax highlighting
let mapleader = ";"       " Set mapleader to ; and use \ for ;'s functionality
nnoremap \ ;
colorscheme jellybeans    " Use a super butchered, heavily modified jellybeans colorscheme

"-----------------------------------------------------------------------------
" Works in progress
"-----------------------------------------------------------------------------
"Leader b to begin buffer switch
map <Leader>b :b 
"Leader ctrl-c to clear statusline
map <Leader><C-c> :<Cr>

"Leader bd to kill buffer
map <Leader>bd :bd<Cr>

"jump to next underscore, good for python
noremap _ f_
noremap <C-_> F_

map r<C-c> <Nop>
"Space to insert a char, ctrl-space to insert a newline
nnoremap <Space> i_<Esc>r
nmap <C-@> i<Cr><C-c>

"use + and * easily
map <Leader><Leader> "*
map <Leader>:        "+

"How cool is this!
function! ReorderParams(args)
  let oldz = @z
  normal "zdi(
  let params = split(a:args, ',\s')
  let order = input(string(map(copy(params), 'v:key + 1 . ": " . v:val')))
  let @z = join(map(split(order, '[0-9]\zs'), 'params[str2nr(v:val) - 1]'), ', ')
  normal "zP
  let @z = oldz
  echo ''
endfunction
function! NolenReorderParams(args)
  let params = split(a:args, ',\s')
  let order = input(string(map(copy(params), 'v:key + 1 . ": " . v:val')))
  let @z = join(map(split(order, '[0-9]\zs'), 'params[str2nr(v:val) - 1]'), ', ')
  normal "zP
endfunction
nnoremap <Leader>x "zdi(:call ReorderParams(@z)<Cr>
nnoremap <Leader>X /\%<C-r>=line(".")<Cr>l[[({]\zs\(\w\+,\s\?\)\+\w\+[\])}]<Cr>v/<C-p>\zs<Cr>2h"zd:call NolenReorderParams(@z)<Cr>
xnoremap <Leader>X "zd:call NolenReorderParams(@z)<Cr>
"yeah..
inoremap o <C-r>*
nnoremap o o<C-c>
nnoremap O O<C-c>

"-----------------------------------------------------------------------------
" Mappings
"-----------------------------------------------------------------------------
"c-j/k for vertical movement, c-h/l for start/end of line
map <C-j> 15j
map <C-k> 15k
map <C-h> ^
map <C-l> $

"use tab in normal and visual mode to indent text
nmap <Tab> v>><Esc>
nmap <S-Tab> v<<<Esc>
vmap <Tab> >gv
vmap <S-Tab> <gv

"toggles: <F7> spell check, <F8> pylint, ;s hlsearch, ;<C-f> flash cursor line
map <F7>          :set spell! spell?<Cr>
map <F8>          :Pylint<Cr>:redraw!<Cr>
map <Leader>s     :set hlsearch! hlsearch?<Cr>
map <Leader><C-f> :set cursorline<Cr>:sleep 250m<Cr>:set nocursorline<Cr>

"General purpose mappings. ;d black hole deletes, ZZ writes all and exits, Q plays macro q, gQ is annoying so don't use it.  Allow ctrl-c to cancel a replace
nnoremap <silent> <Leader>d "_d
vnoremap <silent> <Leader>d "_d
map ZZ :wqa<Cr>
map Q @q
map gQ <Nop>
map r<C-c> <Nop>

";w write file, ;W sudo write file, ;e edit file, ;E edit file in current dir
map <Leader>w :w<Cr>:echo "Written"<Cr>
map <Leader>W :w !sudo tee % >/dev/null
map <Leader>e :e 
map <Leader>E :e <C-r>=expand('%:p:h').'/'<Cr>

"Center the screen when jumping to a search.  Awesome!  Also enable highlighted searches by default
nnoremap n nzz
nnoremap N Nzz
set hlsearch

"Switch buffers with c-n/p, kill buffer with <Leader><C-k>
map <C-n>         :bn<Cr>
map <C-p>         :bp<Cr>
map <Leader><C-k> :TagbarClose<Cr>:bd<Cr>

"Comment keys, ;j to comment out line, ;J to uncomment, ;c-d copy current line(s) and comment them out(for use as a backup)
map <Leader>j <Leader>cc
map <Leader>J <Leader>cu
nmap <Leader><C-d> Ypk<Leader>cc
vmap <Leader><C-d> ygvA<Esc>pgv<Leader>ccgvA<Esc>j

"vv to open vimrc, R to reload vimrc
map <Leader>vv :e ~/.vimrc<Cr>
map <Leader>R  :source ~/.vimrc<Cr>:echo "Refreshed"<Cr>

"ctrl c sends an escape, instead of messing up things like visual column insert
inoremap <C-c> <Esc>
vnoremap <C-c> <Esc>

"Mapings for functions in plugin/generalFunctions.vim and other personal plugins
"Leader f for file-functions.  f[r]ename, f[e]dit temp file, reopen as f[t]emp file
map <Leader>fr :call RenameFile()<Cr>
map <Leader>fe :call OpenTempFile()<Cr>
map <Leader>ft :call TempFile()<Cr>
map <Leader><C-t> :call ToggleOggleOoo()<Cr>

"map <Leader>N     :call RenameFile()<Cr>
"map <Leader>T     :call TempFile()<Cr>
"map <Leader>O     :call OpenTempFile()<Cr>

"-----------------------------------------------------------------------------
" Settings
"-----------------------------------------------------------------------------
set tabstop=8                           " Tabs are 8 spaces
set softtabstop=4                       " Tabs act like they are 4 spaces
set shiftwidth=4                        " autoindent uses 4 spaces
set expandtab                           " expand tabs to proper number of spaces
set shiftround                          " round expanded tabs to multiples of shiftwidth
set listchars=tab:\ \ ,trail:Â·          " show tabs and trailing spaces visually
set wrap                                " Lines are wrapped instead of hidden
set linebreak                           " lines are wrapped at (decently) good points
set textwidth=0                         " Prevent ftplugins from causing vim to do obnoxious autowrapping
set list                                " show tabs
set backspace=indent,eol,start          " backspace is able to kill indents, line breaks, and pre-insert
set shortmess=atI                       " Attempt to prevent annoying multiline prompts
set showcmd                             " show commands as they are typed
set ruler                               " show absolute position in bottom right
set relativenumber                      " linenumbers relative to current position
set numberwidth=2                       " don't allocate too much space for numbers(don't need much since I use relativenumber)
set scrolloff=2                         " give cursor breathing room at top and bottom of screen
set incsearch                           " find searches as you type
set ignorecase                          " ignore case for searches
set smartcase                           " stop ignoring case for searches if capital letters are used
set gdefault                            " default to global search and replace, /g to disable
set complete-=i                         " don't bother with imports when doing tab completion
set wildmenu                            " enable enhanced tab complete
set ofu=syntaxcomplete#Complete         " enable omnifunc completion
set pumheight=10                        " no more than 10 items at a time in insert mode completion
set completeopt=menuone,longest,preview " insert completion: use popup menu(even for 1 match), only insert longest common text, show extra info about current completion
"set virtualedit=onemore                " allow cursor to move 1 character past end of line
set hidden                              " This allows you to switch to a new buffer without writing your current one
set history=1000                        " Save a lot of history
set undolevels=1000                     " Save a lot of undos as well
set undoreload=10000                    " Reload a bunch of undolevels
set undodir=~/.vim/undodir              " For persistent undo
set undofile                            " Also enables persistent undo(undo between sessions)
set pastetoggle=<C-F7>                  " Toggle pastemode with ctrl-F7
set mouse=a                             " Enable mouse

"-----------------------------------------------------------------------------
" Minor extension stuff
"-----------------------------------------------------------------------------
let g:Tb_MoreThanOne     = 1            " It's nice to always have the buffer tab bar open
let g:pydiction_location = '~/.vim/vimfiles/ftplugin/pydiction/complete-dict'

"-----------------------------------------------------------------------------
" Tagbar stuff
"-----------------------------------------------------------------------------
let g:tagbar_compact     = 1            " no need to waste tagbar space, compact mode is better
let g:tagbar_autofocus   = 1            " autofocus tagbar upon opening it
let g:tagbar_width       = 32           " slightly reduce tagbar width for more screen real estate

"-----------------------------------------------------------------------------
" Autocommands
"-----------------------------------------------------------------------------
"Insure I'm always using strict and warnings and stuff in perl
au BufNewFile *.pl execute ":silent! s-^$-#!/usr/bin/perl\r\ruse strict;\ruse warnings;\r\r-|normal "
"Closest filetype for pentadactylrc is vimrc
au BufEnter *.pentadactylrc setf vim
"Formatoptions drives me crazy, these are the only two that don't suck
au FileType * set formatoptions=lq
"Scheme formatting
au BufEnter *.scm setl tabstop=4
au BufEnter *.scm setl shiftwidth=2

"-----------------------------------------------------------------------------
" Misc
"-----------------------------------------------------------------------------
hi clear MatchParen                     " Clear matchparen so that I can set it
hi MatchParen ctermfg=200               " Set matchparen to a ridiculous color so I can see it.  Other good colors are 416,128,185,269
hi clear SpecialKey                     " Clear specialkey (escape characters like  because they are invisible to me on default settings
hi SpecialKey ctermfg=81 guifg=Cyan     " Set them to a nice light blue
hi clear CursorLine                     " Cursorline has strange strange highlighting by default
hi CursorLine cterm=NONE,reverse        " Set cursorline to just reverse the color of the line, mostly I use it to flash cursor location for a few seconds
